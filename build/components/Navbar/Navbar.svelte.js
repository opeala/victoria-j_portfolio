import './Navbar.svelte.css.proxy.js';
/* src\components\Navbar\Navbar.svelte generated by Svelte v3.37.0 */
import {
	SvelteComponent,
	append,
	attr,
	destroy_each,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	set_data,
	set_style,
	space,
	text
} from "../../_snowpack/pkg/svelte/internal.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	return child_ctx;
}

// (29:8) {#each navlists as list}
function create_each_block(ctx) {
	let li;
	let a;
	let t0_value = /*list*/ ctx[5].label + "";
	let t0;
	let a_href_value;
	let t1;

	return {
		c() {
			li = element("li");
			a = element("a");
			t0 = text(t0_value);
			t1 = space();
			attr(a, "class", "md:text-4xl text-xl font-bold text-white uppercase md:mx-12 text-center w-full");
			attr(a, "href", a_href_value = /*list*/ ctx[5].url);
			attr(li, "class", "w-full text-center md:bg-transparent bg-pink-500 md:mb-0 mb-0.5 md:p-0 py-1 px-2 border-b-4 border-transparent hover:border-white");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, a);
			append(a, t0);
			append(li, t1);
		},
		p(ctx, dirty) {
			if (dirty & /*navlists*/ 1 && t0_value !== (t0_value = /*list*/ ctx[5].label + "")) set_data(t0, t0_value);

			if (dirty & /*navlists*/ 1 && a_href_value !== (a_href_value = /*list*/ ctx[5].url)) {
				attr(a, "href", a_href_value);
			}
		},
		d(detaching) {
			if (detaching) detach(li);
		}
	};
}

function create_fragment(ctx) {
	let section;
	let nav;
	let a;
	let h1;
	let t0;
	let t1;
	let button;
	let t3;
	let div;
	let ul;
	let ul_class_value;
	let mounted;
	let dispose;
	let each_value = /*navlists*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			section = element("section");
			nav = element("nav");
			a = element("a");
			h1 = element("h1");
			t0 = text(/*header*/ ctx[1]);
			t1 = space();
			button = element("button");
			button.textContent = "menu";
			t3 = space();
			div = element("div");
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(h1, "class", "md:text-9xl text-5xl text-white text-center");
			attr(a, "class", "");
			attr(a, "href", "/");
			attr(button, "class", "block md:hidden text-2xl font-bold text-white uppercase text-center");
			attr(button, "type", "button");
			attr(button, "data-toggle", "collapse");
			attr(button, "data-target", "#navbarNav");
			attr(button, "aria-controls", "navbarNav");
			attr(button, "aria-expanded", "false");
			attr(button, "aria-label", "Toggle navigation");
			attr(ul, "class", ul_class_value = "flex md:flex-row flex-col items-center justify-around md:mt-8 mt-5 md:transform-none transform origin-top transition-all overflow-hidden md:relative absolute top-0 right-0 left-0 w-min mx-auto " + (!/*mobileMenu*/ ctx[3].visibile ? "scale-y-0" : ""));
			attr(div, "class", "relative w-full");
			attr(div, "id", "navbarNav");
			attr(nav, "class", "flex flex-col justify-start items-center py-4 svelte-ry72wi");
			attr(section, "id", "nav-bar");
			attr(section, "class", "bg-cover bg-center bg-no-repeat sticky top-0 z-10 svelte-ry72wi");
			set_style(section, "background-image", "url(" + /*header_image*/ ctx[2] + ")");
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, nav);
			append(nav, a);
			append(a, h1);
			append(h1, t0);
			append(nav, t1);
			append(nav, button);
			append(nav, t3);
			append(nav, div);
			append(div, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			if (!mounted) {
				dispose = listen(button, "click", /*mobileToggle*/ ctx[4]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*header*/ 2) set_data(t0, /*header*/ ctx[1]);

			if (dirty & /*navlists*/ 1) {
				each_value = /*navlists*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*mobileMenu*/ 8 && ul_class_value !== (ul_class_value = "flex md:flex-row flex-col items-center justify-around md:mt-8 mt-5 md:transform-none transform origin-top transition-all overflow-hidden md:relative absolute top-0 right-0 left-0 w-min mx-auto " + (!/*mobileMenu*/ ctx[3].visibile ? "scale-y-0" : ""))) {
				attr(ul, "class", ul_class_value);
			}

			if (dirty & /*header_image*/ 4) {
				set_style(section, "background-image", "url(" + /*header_image*/ ctx[2] + ")");
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(section);
			destroy_each(each_blocks, detaching);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { navlists = [] } = $$props;
	let { header } = $$props;
	let { header_image } = $$props;
	console.log(navlists);
	let mobileMenu = { visibile: false };

	function mobileToggle() {
		$$invalidate(3, mobileMenu.visibile = !mobileMenu.visibile, mobileMenu);
	}

	$$self.$$set = $$props => {
		if ("navlists" in $$props) $$invalidate(0, navlists = $$props.navlists);
		if ("header" in $$props) $$invalidate(1, header = $$props.header);
		if ("header_image" in $$props) $$invalidate(2, header_image = $$props.header_image);
	};

	return [navlists, header, header_image, mobileMenu, mobileToggle];
}

class Navbar extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { navlists: 0, header: 1, header_image: 2 });
	}
}

export default Navbar;